{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext } from 'react';\nimport { CustomerContext } from '../contexts/AppContextCustomer';\nexport async function fetchCustomers(token) {\n  try {\n    const res = await fetch(\"http://localhost:8080/admin/customers/all\", {\n      method: \"GET\",\n      headers: {\n        Authorization: token,\n        \"Content-Type\": \"application/json\"\n      },\n      mode: \"cors\"\n    });\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport async function Login2(email, password, userType) {\n  _s();\n  const {\n    setLoginToken\n  } = useContext(CustomerContext);\n  try {\n    const response = await fetch('http://localhost:8080/login', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password,\n        userType: userType\n      }),\n      mode: 'cors',\n      method: 'POST'\n    });\n    if (response.ok) {\n      const data = await response.json();\n      setLoginToken(data);\n      return data;\n    } else {\n      throw new Error('Failed to fetch login token');\n    }\n  } catch (error) {\n    console.log(error);\n    return 'Failed to fetch login token';\n  }\n}\n_s(Login2, \"go0LoNTObag81ITYRTmalvGXHmk=\");\n_c = Login2;\nexport async function fetchCustomerIdByEmail(email) {\n  try {\n    const data = await fetch(\"http://localhost:8080/customer/findMyIdByEmail?email=\" + email, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      mode: \"cors\",\n      method: \"GET\"\n    });\n    const data_1 = await data.text();\n    return parseInt(data_1);\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n}\nexport async function fetchCompanyIdByEmail(email) {\n  try {\n    const data = await fetch(\"http://localhost:8080/company/findMyIdByEmail?email=\" + email, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      mode: \"cors\",\n      method: \"GET\"\n    });\n    const data_1 = await data.text();\n    return parseInt(data_1);\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"Login2\");","map":{"version":3,"names":["useContext","CustomerContext","fetchCustomers","token","res","fetch","method","headers","Authorization","mode","data","json","error","console","log","Login2","email","password","userType","_s","setLoginToken","response","body","JSON","stringify","ok","Error","_c","fetchCustomerIdByEmail","data_1","text","parseInt","undefined","fetchCompanyIdByEmail","$RefreshReg$"],"sources":["C:/Users/nirg/Desktop/spring/cuoponProject/cuoponProject/client/src/services/ServerService.ts"],"sourcesContent":["import { useContext } from 'react';\r\nimport { CustomerContext } from '../contexts/AppContextCustomer';\r\nimport { UserType } from './../Entitis.type';\r\n\r\n\r\nexport async function fetchCustomers(token: string) {\r\n  try {\r\n    const res = await fetch(\"http://localhost:8080/admin/customers/all\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: token,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      mode: \"cors\",\r\n    });\r\n    const data = await res.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport async function Login2(email: string, password: string, userType: UserType): Promise<string> {\r\n  const { setLoginToken } = useContext(CustomerContext);\r\n\r\n  try {\r\n    const response = await fetch('http://localhost:8080/login', {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n        userType: userType,\r\n      }),\r\n      mode: 'cors',\r\n      method: 'POST',\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      setLoginToken(data);\r\n      return data;\r\n    } else {\r\n      throw new Error('Failed to fetch login token');\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    return 'Failed to fetch login token';\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport async function fetchCustomerIdByEmail(\r\n  email: string\r\n): Promise<number | undefined> {\r\n  try {\r\n    const data = await fetch(\r\n      \"http://localhost:8080/customer/findMyIdByEmail?email=\" + email,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n\r\n        mode: \"cors\",\r\n        method: \"GET\",\r\n      }\r\n    );\r\n    const data_1 = await data.text();\r\n    return parseInt(data_1);\r\n  } catch (error) {\r\n    console.log(error);\r\n    return undefined;\r\n  }\r\n}\r\n\r\n\r\nexport async function fetchCompanyIdByEmail(\r\n  email: string\r\n): Promise<number | undefined> {\r\n  try {\r\n    const data = await fetch(\r\n      \"http://localhost:8080/company/findMyIdByEmail?email=\" + email,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        mode: \"cors\",\r\n        method: \"GET\",\r\n      }\r\n    );\r\n    const data_1 = await data.text();\r\n    return parseInt(data_1);\r\n  } catch (error) {\r\n    console.log(error);\r\n    return undefined;\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,eAAe,QAAQ,gCAAgC;AAIhE,OAAO,eAAeC,cAAcA,CAACC,KAAa,EAAE;EAClD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;MACnEC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,aAAa,EAAEL,KAAK;QACpB,cAAc,EAAE;MAClB,CAAC;MACDM,IAAI,EAAE;IACR,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAI,EAAE;IAC7B,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF;AAEA,OAAO,eAAeG,MAAMA,CAACC,KAAa,EAAEC,QAAgB,EAAEC,QAAkB,EAAmB;EAAAC,EAAA;EACjG,MAAM;IAAEC;EAAc,CAAC,GAAGpB,UAAU,CAACC,eAAe,CAAC;EAErD,IAAI;IACF,MAAMoB,QAAQ,GAAG,MAAMhB,KAAK,CAAC,6BAA6B,EAAE;MAC1DE,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBR,KAAK,EAAEA,KAAK;QACZC,QAAQ,EAAEA,QAAQ;QAClBC,QAAQ,EAAEA;MACZ,CAAC,CAAC;MACFT,IAAI,EAAE,MAAM;MACZH,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAIe,QAAQ,CAACI,EAAE,EAAE;MACf,MAAMf,IAAI,GAAG,MAAMW,QAAQ,CAACV,IAAI,EAAE;MAClCS,aAAa,CAACV,IAAI,CAAC;MACnB,OAAOA,IAAI;IACb,CAAC,MAAM;MACL,MAAM,IAAIgB,KAAK,CAAC,6BAA6B,CAAC;IAChD;EACF,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAO,6BAA6B;EACtC;AACF;AAACO,EAAA,CA5BqBJ,MAAM;AAAAY,EAAA,GAANZ,MAAM;AAyC5B,OAAO,eAAea,sBAAsBA,CAC1CZ,KAAa,EACgB;EAC7B,IAAI;IACF,MAAMN,IAAI,GAAG,MAAML,KAAK,CACtB,uDAAuD,GAAGW,KAAK,EAC/D;MACET,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MAEDE,IAAI,EAAE,MAAM;MACZH,MAAM,EAAE;IACV,CAAC,CACF;IACD,MAAMuB,MAAM,GAAG,MAAMnB,IAAI,CAACoB,IAAI,EAAE;IAChC,OAAOC,QAAQ,CAACF,MAAM,CAAC;EACzB,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAOoB,SAAS;EAClB;AACF;AAGA,OAAO,eAAeC,qBAAqBA,CACzCjB,KAAa,EACgB;EAC7B,IAAI;IACF,MAAMN,IAAI,GAAG,MAAML,KAAK,CACtB,sDAAsD,GAAGW,KAAK,EAC9D;MACET,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDE,IAAI,EAAE,MAAM;MACZH,MAAM,EAAE;IACV,CAAC,CACF;IACD,MAAMuB,MAAM,GAAG,MAAMnB,IAAI,CAACoB,IAAI,EAAE;IAChC,OAAOC,QAAQ,CAACF,MAAM,CAAC;EACzB,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAOoB,SAAS;EAClB;AACF;AAAC,IAAAL,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}